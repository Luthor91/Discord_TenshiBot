package services

import (
	"log"
	"strings"

	"github.com/Luthor91/Tenshi/controllers"
	"github.com/bwmarrin/discordgo"
)

// MessageService est un service pour g√©rer les messages
type MessageService struct {
	userService     *UserService
	affinityService *AffinityService
	logService      *LogService
}

type KeywordResponse struct {
	Keyword  string
	Response string
	Reaction string
}

var keywordResponsesWithMention = []KeywordResponse{
	{Keyword: "help", Response: "Je suis ici pour t'aider !", Reaction: "‚úÖ"},
	// Ajoutez d'autres mots-cl√©s qui n√©cessitent une mention
}

var keywordResponsesWithoutMention = []KeywordResponse{
	{Keyword: "bonjour", Response: "Salut √† toi !", Reaction: "üëã"},
	{Keyword: "merci", Response: "De rien !", Reaction: "üòä"},
	{Keyword: "aide", Response: "Voici comment je peux t'aider...", Reaction: "‚ùì"},
	{Keyword: "gg", Response: "", Reaction: "üëè"},                   // Juste une r√©action
	{Keyword: "lol", Response: "Haha, tr√®s dr√¥le !", Reaction: ""}, // Juste une r√©ponse
}

// NewMessageService cr√©e une nouvelle instance de MessageService
func NewMessageService(userService *UserService, affinityService *AffinityService, logService *LogService) *MessageService {
	return &MessageService{
		userService:     userService,
		affinityService: affinityService,
		logService:      logService,
	}
}

func (service *MessageService) NewServerMessage(discord *discordgo.Session, message *discordgo.MessageCreate) {
	// √âviter que le bot r√©ponde √† ses propres messages
	if message.Author.ID == discord.State.User.ID {
		return
	}

	// Ajouter de la monnaie et de l'exp√©rience √† l'utilisateur
	if err := service.userService.AddUserIfNotExists(message.Author.ID, message.Author.Username); err != nil {
		log.Printf("Erreur lors de l'ajout de l'utilisateur : %v", err)
		return
	}

	user, err := controllers.NewUserController().GetUserByDiscordID(message.Author.ID)
	if err != nil {
		log.Printf("Erreur lors de la r√©cup√©ration de l'utilisateur : %v", err)
		return
	}

	if err := service.userService.AddExperience(user.UserDiscordID, 1); err != nil {
		log.Printf("Erreur lors de l'ajout de l'exp√©rience : %v", err)
		return
	}

	service.affinityService.AdjustAffinity(user.UserDiscordID, message)

	// V√©rifier si le bot est mentionn√©
	if len(message.Mentions) > 0 {
		service.handleKeywordResponses(discord, message, true)
	} else {
		service.handleKeywordResponses(discord, message, false)
	}

	// Enregistrer le message dans les logs
	if err := service.logService.LogMessage(discord, message); err != nil {
		log.Printf("Erreur lors de l'enregistrement du message : %v", err)
		return
	}
}

// NewPrivateMessage est appel√© lorsqu'un nouveau message est re√ßu en message priv√© (DM).
func (service *MessageService) NewPrivateMessage(discord *discordgo.Session, message *discordgo.MessageCreate) {
	// √âviter de r√©pondre aux propres messages du bot ou aux messages publics
	if message.Author.ID == discord.State.User.ID || message.GuildID != "" {
		return
	}

	// R√©pondre au message priv√©
	if _, err := discord.ChannelMessageSend(message.ChannelID, "Merci pour votre message priv√© !"); err != nil {
		log.Printf("Erreur lors de l'envoi de la r√©ponse au message priv√© : %v", err)
	}
}

func (service *MessageService) handleKeywordResponses(discord *discordgo.Session, message *discordgo.MessageCreate, mentioned bool) {
	content := strings.ToLower(message.Content) // Normaliser le message en minuscule

	var keywordResponses []KeywordResponse
	if mentioned {
		keywordResponses = keywordResponsesWithMention
	} else {
		keywordResponses = keywordResponsesWithoutMention
	}

	for _, keywordResponse := range keywordResponses {
		if strings.Contains(content, keywordResponse.Keyword) {
			// Envoyer la r√©ponse si elle n'est pas vide
			if keywordResponse.Response != "" {
				_, err := discord.ChannelMessageSend(message.ChannelID, keywordResponse.Response)
				if err != nil {
					log.Printf("Erreur lors de l'envoi de la r√©ponse : %v", err)
				}
			}

			// Ajouter la r√©action si elle n'est pas vide
			if keywordResponse.Reaction != "" {
				err := discord.MessageReactionAdd(message.ChannelID, message.ID, keywordResponse.Reaction)
				if err != nil {
					log.Printf("Erreur lors de l'ajout de la r√©action : %v", err)
				}
			}

			// Sortir de la boucle une fois que le mot-cl√© est trouv√©
			return
		}
	}
}
